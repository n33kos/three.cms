<?php 
if($tpl_args['usePixelShaders'] == 1 || $tpl_args['ao_bit'] == 1 || $tpl_args['aa_bit'] == 1){
        echo '
                renderPass = new THREE.RenderPass( scene, camera );
                copyPass = new THREE.ShaderPass( THREE.CopyShader );
                composer = new THREE.EffectComposer( renderer);
                composer.addPass( renderPass );
        ';
}
foreach($tpl_args['shaderIncludes'] as $key => $script){
        if($key == 'filmShader'){
                echo'
                filmPass = new THREE.ShaderPass( THREE.FilmShader );
                filmPass.uniforms[ "sCount" ].value = 1000;
                filmPass.uniforms[ "sIntensity" ].value = 0.9;
                filmPass.uniforms[ "nIntensity" ].value = 0.4;
				//filmPass.uniforms[ "time" ].value = 0.0;
				filmPass.uniforms[ "grayscale" ].value = 0;		
                composer.addPass( filmPass );
                ';
        }
        if($key == 'bleachBypassShader'){
                echo'
                bleachPass = new THREE.ShaderPass( THREE.BleachBypassShader );
                bleachPass.uniforms[ "opacity" ].value = 3.0;
                composer.addPass( bleachPass );
                ';
        }
        if($key == 'colorifyShader'){
                echo'
                colorifyPass = new THREE.ShaderPass( THREE.ColorifyShader );
                colorifyPass.uniforms[ "color" ].value = new THREE.Color( 0xff0000 );
                composer.addPass( colorifyPass );
                ';
        }
        if($key == 'dotScreenShader'){
                echo'
                dotScreenPass = new THREE.ShaderPass( THREE.DotScreenShader );
				dotScreenPass.uniforms[ "tSize" ].value = new THREE.Vector2( 128, 128 );
				dotScreenPass.uniforms[ "center" ].value = new THREE.Vector2( 0.25, 0.25 );
				dotScreenPass.uniforms[ "angle" ].value = 2;
				dotScreenPass.uniforms[ "scale" ].value = 2;
                composer.addPass( dotScreenPass );
                ';
        }
        if($key == 'brightnessContrastShader'){
                echo'
                brightnessContrastPass = new THREE.ShaderPass( THREE.BrightnessContrastShader );
                brightnessContrastPass.uniforms[ "contrast" ].value = 0.8;
				brightnessContrastPass.uniforms[ "brightness" ].value = 0;
                composer.addPass( brightnessContrastPass );
                ';
        }
        if($key == 'colorCorrectionShader'){
                echo'
                colorCorrectionPass = new THREE.ShaderPass( THREE.ColorCorrectionShader );
				colorCorrectionPass.uniforms[ "powRGB" ].value = new THREE.Vector3( 1.5, 2, 1.5 );
				colorCorrectionPass.uniforms[ "mulRGB" ].value = new THREE.Vector3( 1, 1, 1 );
                composer.addPass( colorCorrectionPass );
                ';
        }
        if($key == 'focusShader'){
                echo'
                focusPass = new THREE.ShaderPass( THREE.FocusShader );
				//focusPass.uniforms[ "screenWidth" ].value = 1024;
				//focusPass.uniforms[ "screenHeight" ].value = 1024;
				focusPass.uniforms[ "sampleDistance" ].value = 0.94;
				focusPass.uniforms[ "waveFactor" ].value = 0.00125;
                composer.addPass( focusPass );
                ';
        }
        if($key == 'horizontalBlurShader'){
                echo'
                horizontalBlurPass = new THREE.ShaderPass( THREE.HorizontalBlurShader );
				focusPass.uniforms[ "h" ].value = 1.0 / 512.0;
                composer.addPass( horizontalBlurPass );
                ';
        }
        if($key == 'verticalBlurShader'){
                echo'
                verticalBlurPass = new THREE.ShaderPass( THREE.VerticalBlurShader );
				focusPass.uniforms[ "v" ].value = 1.0 / 512.0;
                composer.addPass( verticalBlurPass );
                ';
        }
        if($key == 'verticalTiltShiftShader'){
                echo'
                verticalTiltShiftPass = new THREE.ShaderPass( THREE.VerticalTiltShiftShader );
				verticalTiltShiftPass.uniforms[ "v" ].value = 1.0 / 512.0;
				verticalTiltShiftPass.uniforms[ "r" ].value = 0.35;
                composer.addPass( verticalTiltShiftPass );
                ';
        }
        if($key == 'hueSaturationShader'){
                echo'
                hueSaturationPass = new THREE.ShaderPass( THREE.HueSaturationShader );
                hueSaturationPass.uniforms[ "hue" ].value = 0.5;
                hueSaturationPass.uniforms[ "saturation" ].value = .5;
                composer.addPass( hueSaturationPass );
                ';
        }
        if($key == 'kaleidoShader'){
                echo'
                kaleidoPass = new THREE.ShaderPass( THREE.KaleidoShader );
				kaleidoPass.uniforms[ "sides" ].value = 10.0;
				kaleidoPass.uniforms[ "angle" ].value = 0.0;
                composer.addPass( kaleidoPass );
                ';
        }
        if($key == 'luminosityShader'){
                echo'
                luminosityPass = new THREE.ShaderPass( THREE.LuminosityShader );
                composer.addPass( luminosityPass );
                ';
        }
        if($key == 'mirrorShader'){
                echo'
                mirrorPass = new THREE.ShaderPass( THREE.MirrorShader );
				mirrorPass.uniforms[ "side" ].value = 1;
                composer.addPass( mirrorPass );
                ';
        }
        if($key == 'rgbShiftShader'){
                echo'
                RGBShiftPass = new THREE.ShaderPass( THREE.RGBShiftShader );
				RGBShiftPass.uniforms[ "amount" ].value = 0.005;
				RGBShiftPass.uniforms[ "angle" ].value = 0.0;
                composer.addPass( RGBShiftPass );
                ';
        }
        if($key == 'sepiaShader'){
                echo'
                sepiaPass = new THREE.ShaderPass( THREE.SepiaShader );
				sepiaPass.uniforms[ "amount" ].value = 1.0;
                composer.addPass( sepiaPass );
                ';
        }
        if($key == 'vignetteShader'){
                echo'
                vignettePass = new THREE.ShaderPass( THREE.VignetteShader );
                vignettePass.uniforms[ "darkness" ].value = 1.5;
				vignettePass.uniforms[ "offset" ].value = 1.0;
                composer.addPass( vignettePass );
                ';
        }
        if($key == 'edgeDetectionFreiChenShader'){
                echo'
                edgeEffect = new THREE.ShaderPass( THREE.EdgeShader );
                edgeEffect.uniforms[ "aspect" ].value.x = window.innerWidth;
                edgeEffect.uniforms[ "aspect" ].value.y = window.innerHeight;
                composer.addPass( edgeEffect );
                ';
        }
        if($key == 'edgeDetectionSobelShader'){
                echo'
                edgeEffect2 = new THREE.ShaderPass( THREE.EdgeShader2 );
                edgeEffect2.uniforms[ "aspect" ].value.x = window.innerWidth;
                edgeEffect2.uniforms[ "aspect" ].value.y = window.innerHeight;
                composer.addPass( edgeEffect2 );
                ';
        }
}

if($tpl_args['aa_bit'] == 1){
                echo'
                fxaaPass = new THREE.ShaderPass( THREE.FXAAShader );
                fxaaPass.uniforms[ "resolution" ].value = new THREE.Vector2( 1 / window.innerWidth, 1 / window.innerHeight );
                composer.addPass( fxaaPass );
                ';
}
if($tpl_args['ao_bit'] == 1){
        echo'
        var SCALE = 1;
        renderTargetParametersRGBA = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat };
        depthTarget = new THREE.WebGLRenderTarget( SCALE * WIDTH, SCALE * HEIGHT, renderTargetParametersRGBA );

        effectSSAO = new THREE.ShaderPass( THREE.SSAOShader );
        effectSSAO.uniforms[ "tDepth" ].value = depthTarget;
        effectSSAO.uniforms[ "size" ].value.set( SCALE * WIDTH, SCALE * HEIGHT );
        effectSSAO.uniforms[ "cameraNear" ].value = camera.near;
        effectSSAO.uniforms[ "cameraFar" ].value = camera.far;
        effectSSAO.uniforms[ "fogNear" ].value = camera.near;
        effectSSAO.uniforms[ "fogFar" ].value = camera.far;
        effectSSAO.uniforms[ "fogEnabled" ].value = 1;
        effectSSAO.uniforms[ "aoClamp" ].value = 0.75;
        effectSSAO.material.defines = { "RGBA_DEPTH": true, "ONLY_AO_COLOR": "1.0, 1.0, 1.0" };
        composer.addPass( effectSSAO );
        
        // depth pass
        depthPassPlugin = new THREE.DepthPassPlugin();
        depthPassPlugin.renderTarget = depthTarget;
        renderer.addPrePlugin( depthPassPlugin );
        ';
}
if($tpl_args['usePixelShaders'] == 1 || $tpl_args['ao_bit'] == 1 || $tpl_args['aa_bit'] == 1){
        echo '
                composer.addPass( copyPass );
                copyPass.renderToScreen = true;
        ';
}
?>