<?php 
if($tpl_args['usePixelShaders'] == 1 || $tpl_args['ao_bit'] == 1 || $tpl_args['aa_bit'] == 1){
        echo '
                renderPass = new THREE.RenderPass( scene, camera );
                copyPass = new THREE.ShaderPass( THREE.CopyShader );
                composer = new THREE.EffectComposer( renderer);
                composer.addPass( renderPass );
        ';
}

//------------------------Start Shaders---------------------------------------
if($tpl_args['shaderIncludes']->filmShader != ''){
        echo'
        filmPass = new THREE.ShaderPass( THREE.FilmShader );
        filmPass.uniforms[ "sCount" ].value = 1000;
        filmPass.uniforms[ "sIntensity" ].value = 0.9;
        filmPass.uniforms[ "nIntensity" ].value = 0.4;
			//filmPass.uniforms[ "time" ].value = 0.0;
			filmPass.uniforms[ "grayscale" ].value = 0;		
        composer.addPass( filmPass );
        ';
}
if($tpl_args['shaderIncludes']->bleachBypassShader != ''){
        echo'
        bleachPass = new THREE.ShaderPass( THREE.BleachBypassShader );
        bleachPass.uniforms[ "opacity" ].value = 3.0;
        composer.addPass( bleachPass );
        ';
}
if($tpl_args['shaderIncludes']->colorifyShader != ''){
        echo'
        colorifyPass = new THREE.ShaderPass( THREE.ColorifyShader );
        colorifyPass.uniforms[ "color" ].value = new THREE.Color( 0xff0000 );
        composer.addPass( colorifyPass );
        ';
}
if($tpl_args['shaderIncludes']->dotScreenShader != ''){
        echo'
        dotScreenPass = new THREE.ShaderPass( THREE.DotScreenShader );
			dotScreenPass.uniforms[ "tSize" ].value = new THREE.Vector2( 128, 128 );
			dotScreenPass.uniforms[ "center" ].value = new THREE.Vector2( 0.25, 0.25 );
			dotScreenPass.uniforms[ "angle" ].value = 2;
			dotScreenPass.uniforms[ "scale" ].value = 2;
        composer.addPass( dotScreenPass );
        ';
}
if($tpl_args['shaderIncludes']->brightnessContrastShader != ''){
        echo'
        brightnessContrastPass = new THREE.ShaderPass( THREE.BrightnessContrastShader );
        brightnessContrastPass.uniforms[ "contrast" ].value = 0.8;
			brightnessContrastPass.uniforms[ "brightness" ].value = 0;
        composer.addPass( brightnessContrastPass );
        ';
}
if($tpl_args['shaderIncludes']->colorCorrectionShader != ''){
        echo'
        colorCorrectionPass = new THREE.ShaderPass( THREE.ColorCorrectionShader );
			colorCorrectionPass.uniforms[ "powRGB" ].value = new THREE.Vector3( 1.5, 2, 1.5 );
			colorCorrectionPass.uniforms[ "mulRGB" ].value = new THREE.Vector3( 1, 1, 1 );
        composer.addPass( colorCorrectionPass );
        ';
}
if($tpl_args['shaderIncludes']->focusShader != ''){
        echo'
        focusPass = new THREE.ShaderPass( THREE.FocusShader );
			//focusPass.uniforms[ "screenWidth" ].value = 1024;
			//focusPass.uniforms[ "screenHeight" ].value = 1024;
			focusPass.uniforms[ "sampleDistance" ].value = 0.94;
			focusPass.uniforms[ "waveFactor" ].value = 0.00125;
        composer.addPass( focusPass );
        ';
}
if($tpl_args['shaderIncludes']->horizontalBlurShader != ''){
        echo'
        horizontalBlurPass = new THREE.ShaderPass( THREE.HorizontalBlurShader );
			focusPass.uniforms[ "h" ].value = 1.0 / 512.0;
        composer.addPass( horizontalBlurPass );
        ';
}
if($tpl_args['shaderIncludes']->verticalBlurShader != ''){
        echo'
        verticalBlurPass = new THREE.ShaderPass( THREE.VerticalBlurShader );
			focusPass.uniforms[ "v" ].value = 1.0 / 512.0;
        composer.addPass( verticalBlurPass );
        ';
}
if($tpl_args['shaderIncludes']->verticalTiltShiftShader != ''){
        echo'
        verticalTiltShiftPass = new THREE.ShaderPass( THREE.VerticalTiltShiftShader );
			verticalTiltShiftPass.uniforms[ "v" ].value = 1.0 / 512.0;
			verticalTiltShiftPass.uniforms[ "r" ].value = 0.35;
        composer.addPass( verticalTiltShiftPass );
        ';
}
if($tpl_args['shaderIncludes']->hueSaturationShader != ''){
        echo'
        hueSaturationPass = new THREE.ShaderPass( THREE.HueSaturationShader );
        hueSaturationPass.uniforms[ "hue" ].value = 0.5;
        hueSaturationPass.uniforms[ "saturation" ].value = .5;
        composer.addPass( hueSaturationPass );
        ';
}
if($tpl_args['shaderIncludes']->kaleidoShader != ''){
        echo'
        kaleidoPass = new THREE.ShaderPass( THREE.KaleidoShader );
			kaleidoPass.uniforms[ "sides" ].value = 10.0;
			kaleidoPass.uniforms[ "angle" ].value = 0.0;
        composer.addPass( kaleidoPass );
        ';
}
if($tpl_args['shaderIncludes']->luminosityShader != ''){
        echo'
        luminosityPass = new THREE.ShaderPass( THREE.LuminosityShader );
        composer.addPass( luminosityPass );
        ';
}
if($tpl_args['shaderIncludes']->mirrorShader != ''){
        echo'
        mirrorPass = new THREE.ShaderPass( THREE.MirrorShader );
			mirrorPass.uniforms[ "side" ].value = 1;
        composer.addPass( mirrorPass );
        ';
}
if($tpl_args['shaderIncludes']->rgbShiftShader != ''){
        echo'
        RGBShiftPass = new THREE.ShaderPass( THREE.RGBShiftShader );
			RGBShiftPass.uniforms[ "amount" ].value = 0.005;
			RGBShiftPass.uniforms[ "angle" ].value = 0.0;
        composer.addPass( RGBShiftPass );
        ';
}
if($tpl_args['shaderIncludes']->sepiaShader != ''){
        echo'
        sepiaPass = new THREE.ShaderPass( THREE.SepiaShader );
			sepiaPass.uniforms[ "amount" ].value = 1.0;
        composer.addPass( sepiaPass );
        ';
}
if($tpl_args['shaderIncludes']->vignetteShader != ''){
        echo'
        vignettePass = new THREE.ShaderPass( THREE.VignetteShader );
        vignettePass.uniforms[ "darkness" ].value = 1.5;
			vignettePass.uniforms[ "offset" ].value = 1.0;
        composer.addPass( vignettePass );
        ';
}
if($tpl_args['shaderIncludes']->edgeDetectionFreiChenShader != ''){
        echo'
        edgeEffect = new THREE.ShaderPass( THREE.EdgeShader );
        edgeEffect.uniforms[ "aspect" ].value.x = window.innerWidth;
        edgeEffect.uniforms[ "aspect" ].value.y = window.innerHeight;
        composer.addPass( edgeEffect );
        ';
}
if($tpl_args['shaderIncludes']->edgeDetectionSobelShader != ''){
        echo'
        edgeEffect2 = new THREE.ShaderPass( THREE.EdgeShader2 );
        edgeEffect2.uniforms[ "aspect" ].value.x = window.innerWidth;
        edgeEffect2.uniforms[ "aspect" ].value.y = window.innerHeight;
        composer.addPass( edgeEffect2 );
        ';
}

//------------------------End Shaders---------------------------------------

if($tpl_args['aa_bit'] == 1){
                echo'
                fxaaPass = new THREE.ShaderPass( THREE.FXAAShader );
                fxaaPass.uniforms[ "resolution" ].value = new THREE.Vector2( 1 / window.innerWidth, 1 / window.innerHeight );
                composer.addPass( fxaaPass );
                ';
}
if($tpl_args['ao_bit'] == 1){
        echo'
        var SCALE = 1;
        renderTargetParametersRGBA = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat };
        depthTarget = new THREE.WebGLRenderTarget( SCALE * WIDTH, SCALE * HEIGHT, renderTargetParametersRGBA );

        effectSSAO = new THREE.ShaderPass( THREE.SSAOShader );
        effectSSAO.uniforms[ "tDepth" ].value = depthTarget;
        effectSSAO.uniforms[ "size" ].value.set( SCALE * WIDTH, SCALE * HEIGHT );
        effectSSAO.uniforms[ "cameraNear" ].value = camera.near;
        effectSSAO.uniforms[ "cameraFar" ].value = camera.far;
        effectSSAO.uniforms[ "fogNear" ].value = camera.near;
        effectSSAO.uniforms[ "fogFar" ].value = camera.far;
        effectSSAO.uniforms[ "fogEnabled" ].value = 1;
        effectSSAO.uniforms[ "aoClamp" ].value = 0.75;
        effectSSAO.material.defines = { "RGBA_DEPTH": true, "ONLY_AO_COLOR": "1.0, 1.0, 1.0" };
        composer.addPass( effectSSAO );
        
        // depth pass
        depthPassPlugin = new THREE.DepthPassPlugin();
        depthPassPlugin.renderTarget = depthTarget;
        renderer.addPrePlugin( depthPassPlugin );
        ';
}
if($tpl_args['usePixelShaders'] == 1 || $tpl_args['ao_bit'] == 1 || $tpl_args['aa_bit'] == 1){
        echo '
                composer.addPass( copyPass );
                copyPass.renderToScreen = true;
        ';
}
?>